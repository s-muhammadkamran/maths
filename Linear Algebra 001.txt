Concepts:
=========

For us humans it's not possible to visualize beyond 3 dimensions.
Linear Algebra let us represent, manipulate and compute higher dimensions data 
in mathematical format or numbers using structures like.

Scalars
Vectors
Matrices
Tensors

Other Concepts:
===============

Operations on Matrices (Arithmatic Operation)
Linear Transformation
Eigen Value
Eigen Vectors
Dimensionality Reduction (PCA)
Numerosity Reduction
Regression
Gradient Descend
Prediction
Classification
Forward & Backward Propogation in Neural Networks
[f1 f2] * [[w1 w2 w3] [w4 w5 w6]] = Matrix Multiplication

Important Application of Linear Algebra for CS and DS:
======================================================
Machine Learning & AI
Model Training

Predictors/Features/X = (Area, No Of Rooms, Floors, Location) >>>>
[House Price Prediction Model] >>>> Predictions/OutCome/Y = (Price)

Supervised Learning
Unsupervised Learning

Computer Graphics: Like Image Processing / Transformation
Every image is a matrix of RGB pixels can be represented as numbers.

Example of a 4 x 4 grayscale image matrix, represented as 2D array.
[ 
  [ 12,  34,  23,  10],
  [ 54,  90, 120,  80],
  [ 89, 150, 180, 130],
  [200, 220, 255, 200]
]

Example of a 4 x 4 RGB image matrix, represented as 3D array in Python.

import numpy as np

# Define a 4x4 RGB image matrix as 3D array
# The lowest dimension represents each pixel as a mix of RGB saturations
# All the colors are representatoin of some mix of RGB
# Where 0 is the lowest and 255 is the higest 255, 0, 0 means Red = Full, Green = No, Blue = No
image_matrix = np.array(
[
    # Row 1
    [        
        [255, 0, 0], # Pixel 1
        [100, 255, 50], # Pixel 2
        [50, 100, 255], # Pixel 3
        [200, 150, 100] # Pixel 4
    ],
    # Row 2
    [[150, 200, 180], [180, 50, 200], [90, 180, 30], [80, 90, 90]],
    # Row 3
    [[30, 80, 60], [60, 40, 10], [120, 160, 80], [170, 30, 200]],
    # Row 4
    [[200, 170, 210], [210, 140, 180], [220, 120, 170], [250, 110, 140]]
])

print("4x4 RGB Image Matrix:\n", image_matrix)

​
  
​


Optimization:


